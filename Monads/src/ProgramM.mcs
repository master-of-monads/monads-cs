using System;
using Monads;

public static class ProgramM
{
	[Monadic]
	public static Maybe<string, string> MaybeFunction()
	{
		var result = Maybe.None<string, string>()!;
		return Maybe.Some<string, string>(result.ToUpper());
	}

	[Monadic]
	public static Maybe<string, string> MaybeFunction2() =>
		Maybe.Some<string, string>(Maybe.None<string, string>()!.ToUpper());

	[Monadic]
	public static State<int, string, string> StateFunction()
	{
		var i = State.Get<int, string>()!;
		State.Set<int, string>(i + 2)!;
		var j = State.Get<int, string>()!;
		return State.Return<int, string, string>(j.ToString());
	}

	[Monadic]
	public static State<int, string, string> StateFunction2()
	{
		{
			var i = State.Get<int, string>()!;
			State.Set<int, string>(i + 2)!;
		}
		var j = State.Get<int, string>()!;
		return State.Return<int, string, string>(j.ToString());
	}

	[Monadic]
	public static State<int, string, string> StateFunction3()
	{
		if (State.Get<int, string>()! == 0)
		{
			State.Set<int, string>(100)!;
		}
		else if (State.Get<int, string>()! == 1)
		{
			State.Set<int, string>(200)!;
		}
		else
		{
			State.Set<int, string>(300)!;
		}
		var j = State.Get<int, string>()!;
		return State.Return<int, string, string>(j.ToString());
	}

	[Monadic]
	public static State<int, string, string> StateFunction32()
	{
		var i = State.Get<int, string>()!;
		if (i == 0)
		{
			i = 100;
		}
		else if (i == 1)
		{
			i = 200;
		}
		else
		{
			i = 300;
		}
		State.Set<int, string>(i)!;
		var j = State.Get<int, string>()!;
		return State.Return<int, string, string>(j.ToString());
	}
}
